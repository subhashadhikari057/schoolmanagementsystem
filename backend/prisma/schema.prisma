generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// üîê Core User Management
// =========================

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  phone        String? @unique
  passwordHash String
  fullName     String
  isActive           Boolean   @default(true)
  lastLoginAt        DateTime?
  lastPasswordChange DateTime?
  needPasswordChange Boolean @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  roles     UserRole[]
  sessions  UserSession[]
  auditLogs AuditLog[]
  idCards   IDCard[]

  teacher Teacher?
  student Student?
  parentLinks ParentStudentLink[] @relation("ParentLink")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// =========================
// üìö Academic Modules
// =========================

model Subject {
  id          String  @id @default(uuid())
  name        String
  code        String  @unique
  description String?
  maxMarks    Int
  passMarks   Int

  assignedClasses ClassSubject[]
  teacherAssignments TeacherSubject[] @relation("SubjectTeacherAssignments")
  assignments Assignment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Class {
  id          String  @id @default(uuid())
  grade       Int
  section     String
  capacity    Int
  status      String   @default("active")
  roomId      String
  room        Classroom @relation(fields: [roomId], references: [id])
  classTeacherId String?
  classTeacher   Teacher? @relation("ClassTeacher", fields: [classTeacherId], references: [id])

  students       Student[]
  assignedSubjects ClassSubject[]
  teacherAssignments TeacherClass[] @relation("ClassTeacherAssignments")
  assignments Assignment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Classroom {
  id          String  @id @default(uuid())
  roomNo      String  @unique
  name        String?
  capacity    Int     @default(30)
  floor       Int     @default(1)
  building    String?
  note        String?
  status      String  @default("active")
  isAvailable Boolean @default(true)

  classes Class[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([status])
  @@index([isAvailable])
}

model ClassSubject {
  id        String  @id @default(uuid())
  classId   String
  subjectId String
  teacherId String? // Optional - can assign teacher later

  class   Class   @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher? @relation("TeacherClassSubjects", fields: [teacherId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@unique([classId, subjectId]) // Prevent duplicate subject assignments to same class
}

// =========================
// üéì Student & Guardian
// =========================

model Student {
  id           String @id @default(uuid())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  classId      String
  class        Class  @relation(fields: [classId], references: [id])

  rollNumber   String
  admissionDate DateTime
  email        String

  dob          DateTime
  gender       String
  bloodGroup   String?
  imageUrl     String?

  addressId    String?
  address      Address? @relation(fields: [addressId], references: [id])

  fatherName   String
  motherName   String
  fatherPhone  String?
  motherPhone  String?
  fatherEmail  String
  motherEmail  String
  fatherOccupation String?
  motherOccupation String?

  guardians Guardian[]
  parents   ParentStudentLink[]
  submissions Submission[]

  profile StudentProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@index([userId])
}

model StudentProfile {
  id               String @id @default(uuid())
  studentId        String @unique
  student          Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  emergencyContact Json    @default("{}")
  interests        Json    @default("{}")
  additionalData   Json    @default("{}")
  profilePhotoUrl  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
}

model Guardian {
  id         String @id @default(uuid())
  studentId  String
  fullName   String
  phone      String
  email      String
  relation   String

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

// =========================
// üë™ Parent Management
// =========================

model ParentStudentLink {
  id String @id @default(uuid())

  parentId String?
  parent   User?   @relation("ParentLink", fields: [parentId], references: [id], onDelete: Cascade)

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  relationship String?
  isPrimary    Boolean  @default(false)
  contactName   String?
  contactEmail  String?
  contactPhone  String?

  createdAt DateTime @default(now())
}

model Address {
  id       String @id @default(uuid())
  street   String?
  city     String?
  state    String?
  pinCode  String?

  students Student[]
}



// =========================
// üßë‚Äçüè´ Teacher Management
// =========================

model Teacher {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  employeeId       String? @unique
  joiningDate      DateTime
  experienceYears  Int?
  qualification    String?
  designation      String
  subjectAssignments TeacherSubject[] @relation("TeacherSubjectAssignments")
  classAssignments   TeacherClass[] @relation("TeacherClassAssignments")
  classSubjects      ClassSubject[] @relation("TeacherClassSubjects")
  classesAsTeacher   Class[] @relation("ClassTeacher")
  assignments        Assignment[]

  dob          DateTime
  gender       String
  bloodGroup   String?
  maritalStatus String?
  imageUrl     String?

  // Additional fields from service
  department       String?
  specialization   String?
  employmentStatus String? @default("active")
  employmentDate   DateTime?
  dateOfBirth      DateTime?
  address          String?

  basicSalary Decimal @db.Decimal(10,2)
  allowances  Decimal @db.Decimal(10,2)
  totalSalary Decimal @db.Decimal(10,2)

  // Bank account details
  bankName           String?
  bankAccountNumber  String?
  bankBranch         String?
  panNumber          String?
  citizenshipNumber  String?

  isClassTeacher Boolean @default(false)
  languagesKnown Json?  @default("[]")
  certifications String?
  previousExperience String?

  profile TeacherProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherProfile {
  id              String @id @default(uuid())
  teacherId       String @unique
  teacher         Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  profilePhotoUrl String?
  bio             String?
  contactInfo     Json?   @default("{}")
  socialLinks     Json?   @default("{}")
  additionalData  Json?   @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
}

model TeacherSubject {
  id        String @id @default(uuid())
  teacherId String
  subjectId String

  teacher Teacher @relation("TeacherSubjectAssignments", fields: [teacherId], references: [id])
  subject Subject @relation("SubjectTeacherAssignments", fields: [subjectId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherClass {
  id        String @id @default(uuid())
  teacherId String
  classId   String

  teacher Teacher @relation("TeacherClassAssignments", fields: [teacherId], references: [id])
  class   Class   @relation("ClassTeacherAssignments", fields: [classId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// =========================
// üë®‚Äçüíº Admin & Staff
// =========================

model Staff {
  id     String @id @default(uuid())
  // Static record fields (no user login needed)
  email       String
  fullName    String
  firstName   String
  middleName  String?
  lastName    String
  dob         DateTime
  gender      String
  bloodGroup  String?
  phone       String
  emergencyContact String
  maritalStatus String?

  // Additional fields from service
  designation      String?
  department       String?
  employmentDate   DateTime?
  employmentStatus String? @default("active")
  experienceYears  Int?

  basicSalary Decimal @db.Decimal(10, 2)
  allowances  Decimal @db.Decimal(10, 2)
  totalSalary Decimal @db.Decimal(10, 2)

  // Bank account details
  bankName           String?
  bankAccountNumber  String?
  bankBranch         String?
  panNumber          String?
  citizenshipNumber  String?

  permissions String[] // optional for granular access only for admins

  profile StaffProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model StaffProfile {
  id              String @id @default(uuid())
  staffId         String @unique
  staff           Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  profilePhotoUrl String?
  bio             String?
  contactInfo     Json?   @default("{}")
  additionalData  Json?   @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
}

// =========================
// üÜî ID Card Management
// =========================

model IDCard {
  id         String @id @default(uuid())
  type       String // Student, Teacher, Staff
  templateId String
  expiryDate DateTime
  batchName  String?

  template   IDCardTemplate @relation("IDCardTemplates", fields: [templateId], references: [id])

  issuedForId String
  issuedFor   User @relation(fields: [issuedForId], references: [id])

  createdAt DateTime @default(now())
}

model IDCardTemplate {
  id       String @id @default(uuid())
  name     String
  layout   Json
  metadata Json?

  idCards  IDCard[] @relation("IDCardTemplates")

  createdAt DateTime @default(now())
}

// =========================
// üì¶ Support Entities
// =========================

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@unique([userId, roleId])
}

model Role {
  id           String  @id @default(uuid())
  name         String  @unique
  description  String?
  isSystemRole Boolean @default(false)
  permissions  RolePermission[]
  userRoles    UserRole[]
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
}

model Permission {
  id          String  @id @default(uuid())
  code        String  @unique
  description String?
  rolePermissions RolePermission[]
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  module    String?
  timestamp DateTime @default(now())
  status    String   @default("SUCCESS")
  details   Json?
  ipAddress String?
  userAgent String?

  user User? @relation(fields: [userId], references: [id])
}

model UserSession {
  id        String @id @default(uuid())
  userId    String
  tokenHash String
  loginAt   DateTime @default(now())
  lastActivityAt DateTime?
  revokedAt   DateTime?
  ipAddress   String?
  userAgent   String?

  user User @relation(fields: [userId], references: [id])
}

// =========================
// üìÖ Calendar Management
// =========================

model CalendarEntry {
  id          String @id @default(uuid())
  name        String
  type        CalendarEntryType
  
  // Date information
  startDate   DateTime
  endDate     DateTime
  
  // Event-specific fields
  venue       String?
  
  // Holiday-specific fields
  holidayType HolidayType?
  
  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  
  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid
  
  @@index([type])
  @@index([startDate])
  @@index([endDate])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

enum CalendarEntryType {
  HOLIDAY
  EVENT
}

enum HolidayType {
  NATIONAL
  SCHOOL
}

// =========================
// üìù Assignment Management
// =========================

model Assignment {
  id          String @id @default(uuid())
  title       String
  description String?
  classId     String
  subjectId   String
  teacherId   String
  dueDate     DateTime?
  additionalMetadata Json? @default("{}")

  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: SetNull)

  submissions Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
  @@index([dueDate])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Submission {
  id           String @id @default(uuid())
  assignmentId String
  studentId    String
  submittedAt  DateTime? @default(now())
  isCompleted  Boolean @default(false)
  feedback     String?
  fileLinks    Json? @default("[]")

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([assignmentId, studentId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([isCompleted])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}
