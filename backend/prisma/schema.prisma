generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// üîê Core User Management
// =========================

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  phone        String? @unique
  passwordHash String
  fullName     String

  isActive           Boolean   @default(true)
  lastLoginAt        DateTime?
  lastPasswordChange DateTime?
  needPasswordChange Boolean @default(false) // in case of user created with temporary password

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  roles     UserRole[]
  sessions  UserSession[]
  auditLogs AuditLog[]
  passwordResetTokens PasswordResetToken[] @relation("PasswordResetTokens")

  teacher     Teacher?
  student     Student?
  parentLinks ParentStudentLink[] @relation("ParentLink")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Role {
  id           String  @id @default(uuid())
  name         String  @unique
  description  String?
  isSystemRole Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  users       UserRole[]
  permissions RolePermission[]

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Permission {
  id          String  @id @default(uuid())
  code        String  @unique
  description String?
  module      String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  roles RolePermission[]

  @@index([code])
  @@index([module])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  assignedAt DateTime @default(now())

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RolePermission {
  id     String @id @default(uuid())
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  grantedAt DateTime @default(now())

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserSession {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  tokenHash         String
  userAgent         String?
  ipAddress         String?
  deviceFingerprint String?
  revokeReason      String?

  loginAt        DateTime  @default(now())
  lastActivityAt DateTime? @default(now())
  expiresAt      DateTime?
  revokedAt      DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([userId])
  @@index([expiresAt])
  @@index([lastActivityAt])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model AuditLog {
  id           String   @id @default(uuid())
  userId       String?
  action       String
  module       String?
  status       String   @default("SUCCESS")
  details      Json?
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime @default(now())
  traceId      String?
  sessionId    String?
  resourceId   String?
  resourceType String?
  endpoint     String?
  method       String?
  statusCode   Int?
  duration     Int?
  errorCode    String?
  errorMessage String?

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([module])
  @@index([timestamp])
  @@index([traceId])
  @@index([status])
  @@index([resourceId])
}

// =========================
// üßë‚Äçüè´ Teacher Module
// =========================

enum TeacherEmploymentStatus {
  active
  on_leave
  resigned
  terminated
}

model Teacher {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  designation      String?
  qualification    String?
  employmentDate   DateTime?
  employmentStatus TeacherEmploymentStatus @default(active)

  department         String?
  additionalMetadata Json?   @default("{}")

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  profile          TeacherProfile?
  subjects         TeacherSubject[]
  classAssignments TeacherClass[]
  assignments      Assignment[]

  @@index([userId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherProfile {
  id        String  @id @default(uuid())
  teacherId String  @unique
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  bio             String?
  profilePhotoUrl String?
  contactInfo     Json    @default("{}")
  socialLinks     Json    @default("{}")
  additionalData  Json    @default("{}")

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([teacherId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Subject {
  id          String  @id @default(uuid())
  name        String
  code        String  @unique
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  teacherSubjects TeacherSubject[]
  assignments     Assignment[]
  examSessions    ExamSession[]

  @@index([code])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherSubject {
  id        String  @id @default(uuid())
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([teacherId, subjectId])
  @@index([teacherId])
  @@index([subjectId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// =========================
// üè´ Class & Section Module
// =========================

model Class {
  id   String @id @default(uuid())
  name String // e.g., "Grade 10"

  sections           Section[]
  teacherAssignments TeacherClass[]
  assignments        Assignment[]
  examSessions       ExamSession[]
  attendanceRecords  AttendanceRecord[]
  feeStructures      FeeStructure[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  deletedById String?   @db.Uuid
  Student     Student[]

  @@index([name])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Section {
  id      String @id @default(uuid())
  name    String
  classId String
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  teacherAssignments TeacherClass[]
  assignments        Assignment[]
  examSessions       ExamSession[]
  attendanceRecords  AttendanceRecord[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  deletedById String?   @db.Uuid
  Student     Student[]

  @@unique([name, classId])
  @@index([classId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherClass {
  id        String  @id @default(uuid())
  teacherId String
  classId   String
  sectionId String?

  teacher Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class   Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  section Section? @relation(fields: [sectionId], references: [id], onDelete: SetNull)

  assignedAt DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([teacherId, classId, sectionId])
  @@index([teacherId])
  @@index([classId])
  @@index([sectionId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// =========================
// üéì Student & Parent Module
// =========================

model Student {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  classId String
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  rollNumber String

  dob                DateTime?
  gender             String?
  additionalMetadata Json?     @default("{}")

  profile StudentProfile?
  parents ParentStudentLink[]
  assignmentSubmissions AssignmentSubmission[]
  examResults           ExamResult[]
  attendanceRecords     AttendanceRecord[]
  feePayments           FeePayment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([classId, sectionId, rollNumber], name: "unique_roll_per_class_section")
  @@index([userId])
  @@index([classId])
  @@index([sectionId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model StudentProfile {
  id        String  @id @default(uuid())
  studentId String  @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  bio              String?
  profilePhotoUrl  String?
  emergencyContact Json?   @default("{}")
  interests        Json?   @default("{}")
  additionalData   Json?   @default("{}")

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([studentId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ParentStudentLink {
  id String @id @default(uuid())

  // ‚úÖ Make parentId optional
  parentId String?
  parent   User?   @relation("ParentLink", fields: [parentId], references: [id], onDelete: Cascade)

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  relationship String?
  isPrimary    Boolean  @default(false)
  linkedAt     DateTime @default(now())

  // ‚úÖ New fields to support non-primary parent contact
  contactName   String?
  contactEmail  String?
  contactPhone  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([parentId, studentId])
  @@index([parentId])
  @@index([studentId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// =========================
// üîê Password Reset & OTP
// =========================

model PasswordResetToken {
  id     String @id @default(uuid())
  userId String
  user   User   @relation("PasswordResetTokens", fields: [userId], references: [id], onDelete: Cascade)

  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// =========================
// üè´ Academic Configuration
// =========================

model AcademicYear {
  id         String    @id @default(uuid())
  name       String    @unique // e.g., "2024-2025"
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean   @default(false)
  isCurrent  Boolean   @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  // Relations
  assignments Assignment[]
  exams       Exam[]
  feeStructures FeeStructure[]

  @@index([isActive])
  @@index([isCurrent])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// =========================
// üìö Assignments Module
// =========================

enum AssignmentStatus {
  draft
  published
  submitted
  graded
  archived
}

model Assignment {
  id          String           @id @default(uuid())
  title       String
  description String?
  status      AssignmentStatus @default(draft)

  classId   String
  class     Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)

  dueDate     DateTime?
  maxMarks    Int?      @default(100)
  attachments Json?     @default("[]")

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  submissions AssignmentSubmission[]

  @@index([classId])
  @@index([sectionId])
  @@index([subjectId])
  @@index([teacherId])
  @@index([academicYearId])
  @@index([status])
  @@index([dueDate])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

enum SubmissionStatus {
  pending
  submitted
  late
  graded
  returned
}

model AssignmentSubmission {
  id           String           @id @default(uuid())
  assignmentId String
  assignment   Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  status      SubmissionStatus @default(pending)
  content     String?
  attachments Json?            @default("[]")
  
  submittedAt DateTime?
  gradedAt    DateTime?
  marksObtained Int?
  feedback    String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([assignmentId, studentId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([status])
  @@index([submittedAt])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// =========================
// üìù Exams Module
// =========================

enum ExamStatus {
  scheduled
  ongoing
  completed
  cancelled
}

model Exam {
  id          String     @id @default(uuid())
  name        String
  description String?
  status      ExamStatus @default(scheduled)

  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)

  term      String    // e.g., "First", "Second", "Final"
  startDate DateTime
  endDate   DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  sessions ExamSession[]

  @@index([academicYearId])
  @@index([term])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ExamSession {
  id     String @id @default(uuid())
  examId String
  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)

  classId   String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  sessionDate DateTime
  duration    Int      // in minutes
  maxMarks    Int      @default(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  results ExamResult[]

  @@index([examId])
  @@index([classId])
  @@index([sectionId])
  @@index([subjectId])
  @@index([sessionDate])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ExamResult {
  id            String      @id @default(uuid())
  examSessionId String
  examSession   ExamSession @relation(fields: [examSessionId], references: [id], onDelete: Cascade)
  studentId     String
  student       Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  marksObtained Int
  grade         String?
  remarks       String?
  isAbsent      Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([examSessionId, studentId])
  @@index([examSessionId])
  @@index([studentId])
  @@index([grade])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// =========================
// üìÖ Attendance Module
// =========================

enum AttendanceStatus {
  present
  absent
  late
  excused
}

model AttendanceRecord {
  id        String           @id @default(uuid())
  studentId String
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classId   String
  class     Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  sectionId String
  section   Section          @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  date   DateTime
  status AttendanceStatus

  remarks String?
  markedBy String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([studentId, date])
  @@index([studentId])
  @@index([classId])
  @@index([sectionId])
  @@index([date])
  @@index([status])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// =========================
// üí∞ Finance Module
// =========================

enum FeeType {
  tuition
  library
  transport
  exam
  activity
  other
}

model FeeStructure {
  id          String  @id @default(uuid())
  name        String
  description String?
  feeType     FeeType
  amount      Decimal @db.Decimal(10, 2)
  isActive    Boolean @default(true)

  classId String?
  class   Class?  @relation(fields: [classId], references: [id], onDelete: SetNull)

  academicYearId String?
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  payments FeePayment[]

  @@index([feeType])
  @@index([isActive])
  @@index([classId])
  @@index([academicYearId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

enum PaymentStatus {
  pending
  paid
  overdue
  cancelled
}

model FeePayment {
  id             String        @id @default(uuid())
  studentId      String
  student        Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  feeStructureId String
  feeStructure   FeeStructure  @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)

  amountDue  Decimal       @db.Decimal(10, 2)
  amountPaid Decimal       @default(0) @db.Decimal(10, 2)
  status     PaymentStatus @default(pending)

  dueDate  DateTime
  paidDate DateTime?

  transactionId String?
  paymentMethod String?
  remarks       String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([studentId])
  @@index([feeStructureId])
  @@index([status])
  @@index([dueDate])
  @@index([paidDate])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

