generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(uuid())
  email              String                @unique
  phone              String?               @unique
  passwordHash       String
  fullName           String
  isActive           Boolean               @default(true)
  lastLoginAt        DateTime?
  lastPasswordChange DateTime?
  needPasswordChange Boolean               @default(false)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  createdById        String?               @db.Uuid
  updatedById        String?               @db.Uuid
  deletedById        String?               @db.Uuid
  auditLogs          AuditLog[]
  idCards            IDCard[]
  parent             Parent?
  student            Student?
  teacher            Teacher?
  staff              Staff?
  roles              UserRole[]
  sessions           UserSession[]
  teacherSalaryApprovals TeacherSalaryHistory[] @relation("SalaryApprover")
  staffSalaryApprovals   StaffSalaryHistory[]   @relation("StaffSalaryApprover")
  noticesCreated     Notice[] @relation("NoticeCreator")
  noticesUpdated     Notice[] @relation("NoticeUpdater")
  noticesDeleted     Notice[] @relation("NoticeDeleter")
  noticesReceived    NoticeRecipient[]

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([fullName])
  @@index([email])
}

model Subject {
  id                 String           @id @default(uuid())
  name               String
  code               String
  description        String?
  maxMarks           Int
  passMarks          Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  createdById        String?          @db.Uuid
  updatedById        String?          @db.Uuid
  deletedById        String?          @db.Uuid
  assignments        Assignment[]
  assignedClasses    ClassSubject[]
  teacherAssignments TeacherSubject[] @relation("SubjectTeacherAssignments")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@unique([code, deletedAt], name: "unique_subject_code_when_active")
}

model Class {
  id                 String         @id @default(uuid())
  name               String?
  grade              Int
  section            String
  capacity           Int
  currentEnrollment  Int            @default(0)
  shift              ClassShift     @default(MORNING)
  status             String         @default("active")
  roomId             String
  classTeacherId     String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  createdById        String?        @db.Uuid
  updatedById        String?        @db.Uuid
  deletedById        String?        @db.Uuid
  assignments        Assignment[]
  classTeacher       Teacher?       @relation("ClassTeacher", fields: [classTeacherId], references: [id])
  room               Classroom      @relation(fields: [roomId], references: [id])
  assignedSubjects   ClassSubject[]
  students           Student[]
  teacherAssignments TeacherClass[] @relation("ClassTeacherAssignments")
  notices            Notice[] @relation("NoticeClass")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([grade])
  @@index([section])
  @@index([shift])
}

model Classroom {
  id          String    @id @default(uuid())
  roomNo      String    @unique
  name        String?
  capacity    Int       @default(30)
  floor       Int       @default(1)
  building    String?
  note        String?
  status      String    @default("active")
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  deletedById String?   @db.Uuid
  classes     Class[]

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([status])
  @@index([isAvailable])
}

model ClassSubject {
  id          String    @id @default(uuid())
  classId     String
  subjectId   String
  teacherId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  deletedById String?   @db.Uuid
  class       Class     @relation(fields: [classId], references: [id])
  subject     Subject   @relation(fields: [subjectId], references: [id])
  teacher     Teacher?  @relation("TeacherClassSubjects", fields: [teacherId], references: [id])

  @@unique([classId, subjectId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Student {
  id                String              @id @default(uuid())
  userId            String              @unique
  classId           String
  rollNumber        String              @unique
  admissionDate     DateTime
  email             String
  dob               DateTime
  gender            String
  bloodGroup        String?
  ethnicity         String?
  imageUrl          String?
  fatherPhone       String?
  motherPhone       String?
  fatherEmail       String?
  motherEmail       String?
  fatherOccupation  String?
  motherOccupation  String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  academicStatus    String              @default("active")
  address           String?
  allergies         String?
  city              String?
  createdById       String?             @db.Uuid
  dateOfBirth       DateTime?
  deletedById       String?             @db.Uuid
  feeStatus         String              @default("pending")
  interests         String?
  maritalStatus     String?             @default("Single")
  medicalConditions String?
  phone             String?
  pinCode           String?
  profilePhotoUrl   String?
  specialNeeds      String?
  state             String?
  street            String?
  studentId         String?             @unique
  transportMode     String?
  updatedById       String?             @db.Uuid
  fatherFirstName   String?
  fatherMiddleName  String?
  fatherLastName    String?
  motherFirstName   String?
  motherMiddleName  String?
  motherLastName    String?
  guardians         Guardian[]
  parents           ParentStudentLink[]
  class             Class               @relation(fields: [classId], references: [id])
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile           StudentProfile?
  submissions       Submission[]

  @@index([userId])
  @@index([classId])
  @@index([rollNumber])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([academicStatus])
  @@index([ethnicity])
  @@index([feeStatus])
}

model StudentProfile {
  id               String    @id @default(uuid())
  studentId        String    @unique
  emergencyContact Json      @default("{}")
  interests        Json      @default("{}")
  additionalData   Json      @default("{}")
  profilePhotoUrl  String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  student          Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Guardian {
  id        String   @id @default(uuid())
  studentId String
  fullName  String
  phone     String
  email     String
  relation  String
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Parent {
  id                           String              @id @default(uuid())
  userId                       String              @unique
  dateOfBirth                  DateTime?
  gender                       String?
  occupation                   String?
  workPlace                    String?
  workPhone                    String?
  emergencyContactName         String?
  emergencyContactPhone        String?
  emergencyContactRelationship String?
  street                       String?
  city                         String?
  state                        String?
  pinCode                      String?
  country                      String?
  notes                        String?
  specialInstructions          String?
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime?
  deletedAt                    DateTime?
  createdById                  String?             @db.Uuid
  updatedById                  String?             @db.Uuid
  deletedById                  String?             @db.Uuid
  user                         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile                      ParentProfile?
  children                     ParentStudentLink[] @relation("ParentChildren")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ParentProfile {
  id              String    @id @default(uuid())
  parentId        String    @unique
  profilePhotoUrl String?
  bio             String?
  socialLinks     Json?     @default("{}")
  additionalData  Json?     @default("{}")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  parent          Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model ParentStudentLink {
  id           String    @id @default(uuid())
  parentId     String
  studentId    String
  relationship String
  isPrimary    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime?
  parent       Parent    @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId], name: "parentId_studentId")
  @@index([parentId])
  @@index([studentId])
}

model Teacher {
  id                 String                @id @default(uuid())
  userId             String                @unique
  employeeId         String?               @unique
  joiningDate        DateTime
  experienceYears    Int?
  qualification      String?
  designation        String
  dob                DateTime
  gender             String
  bloodGroup         String?
  maritalStatus      String?
  imageUrl           String?
  department         String?
  specialization     String?
  employmentStatus   String?               @default("active")
  employmentDate     DateTime?
  dateOfBirth        DateTime?
  address            String?
  basicSalary        Decimal               @db.Decimal(10, 2)
  allowances         Decimal               @db.Decimal(10, 2)
  totalSalary        Decimal               @db.Decimal(10, 2)
  isClassTeacher     Boolean               @default(false)
  languagesKnown     Json?                 @default("[]")
  certifications     String?
  previousExperience String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  createdById        String?               @db.Uuid
  updatedById        String?               @db.Uuid
  deletedById        String?               @db.Uuid
  bankAccountNumber  String?
  bankBranch         String?
  bankName           String?
  citizenshipNumber  String?
  panNumber          String?
  assignments        Assignment[]
  classesAsTeacher   Class[]               @relation("ClassTeacher")
  classSubjects      ClassSubject[]        @relation("TeacherClassSubjects")
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  classAssignments   TeacherClass[]        @relation("TeacherClassAssignments")
  profile            TeacherProfile?
  salaryHistory      TeacherSalaryHistory[]
  subjectAssignments TeacherSubject[]      @relation("TeacherSubjectAssignments")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherProfile {
  id              String    @id @default(uuid())
  teacherId       String    @unique
  profilePhotoUrl String?
  bio             String?
  contactInfo     Json?     @default("{}")
  socialLinks     Json?     @default("{}")
  additionalData  Json?     @default("{}")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  teacher         Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model TeacherSubject {
  id          String    @id @default(uuid())
  teacherId   String
  subjectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  deletedById String?   @db.Uuid
  subject     Subject   @relation("SubjectTeacherAssignments", fields: [subjectId], references: [id])
  teacher     Teacher   @relation("TeacherSubjectAssignments", fields: [teacherId], references: [id])

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherClass {
  id          String    @id @default(uuid())
  teacherId   String
  classId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  deletedById String?   @db.Uuid
  class       Class     @relation("ClassTeacherAssignments", fields: [classId], references: [id])
  teacher     Teacher   @relation("TeacherClassAssignments", fields: [teacherId], references: [id])

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Staff {
  id                String               @id @default(uuid())
  userId            String?              @unique
  email             String
  fullName          String
  firstName         String
  middleName        String?
  lastName          String
  employeeId        String?              @unique
  dob               DateTime
  gender            String
  bloodGroup        String?
  phone             String
  emergencyContact  String
  maritalStatus     String?
  designation       String?
  department        String?
  employmentDate    DateTime?
  joiningDate       DateTime?
  basicSalary       Decimal              @db.Decimal(10, 2)
  allowances        Decimal              @db.Decimal(10, 2)
  totalSalary       Decimal              @db.Decimal(10, 2)
  permissions       String[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  createdById       String?              @db.Uuid
  updatedById       String?              @db.Uuid
  deletedById       String?              @db.Uuid
  bankAccountNumber String?
  bankBranch        String?
  bankName          String?
  citizenshipNumber String?
  panNumber         String?
  employmentStatus  String?              @default("active")
  experienceYears   Int?
  profile           StaffProfile?
  user              User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  salaryHistory     StaffSalaryHistory[]

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model StaffProfile {
  id              String    @id @default(uuid())
  staffId         String    @unique
  profilePhotoUrl String?
  bio             String?
  contactInfo     Json?     @default("{}")
  additionalData  Json?     @default("{}")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  staff           Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model IDCard {
  id          String         @id @default(uuid())
  type        String
  templateId  String
  expiryDate  DateTime
  batchName   String?
  issuedForId String
  createdAt   DateTime       @default(now())
  issuedFor   User           @relation(fields: [issuedForId], references: [id])
  template    IDCardTemplate @relation("IDCardTemplates", fields: [templateId], references: [id])
}

model IDCardTemplate {
  id        String   @id @default(uuid())
  name      String
  layout    Json
  metadata  Json?
  createdAt DateTime @default(now())
  idCards   IDCard[] @relation("IDCardTemplates")
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Role {
  id           String           @id @default(uuid())
  name         String           @unique
  description  String?
  isSystemRole Boolean          @default(false)
  permissions  RolePermission[]
  userRoles    UserRole[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
}

model Permission {
  id              String           @id @default(uuid())
  code            String           @unique
  description     String?
  rolePermissions RolePermission[]
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  module    String?
  timestamp DateTime @default(now())
  status    String   @default("SUCCESS")
  details   Json?
  ipAddress String?
  userAgent String?
  user      User?    @relation(fields: [userId], references: [id])
}

model UserSession {
  id                String    @id @default(uuid())
  userId            String
  tokenHash         String
  loginAt           DateTime  @default(now())
  lastActivityAt    DateTime?
  revokedAt         DateTime?
  ipAddress         String?
  userAgent         String?
  deviceInfo        String?
  isCurrentDevice   Boolean   @default(false)
  previousTokenHash String?
  revokeReason      String?
  user              User      @relation(fields: [userId], references: [id])
}

model CalendarEntry {
  id          String            @id @default(uuid())
  type        CalendarEntryType
  startDate   DateTime
  endDate     DateTime
  venue       String?
  holidayType HolidayType?
  startTime   String?
  endTime     String?
  examType    ExamType?
  examDetails String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?           @db.Uuid
  updatedById String?           @db.Uuid
  deletedById String?           @db.Uuid
  name        String

  @@index([type])
  @@index([startDate])
  @@index([endDate])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Assignment {
  id                 String       @id @default(uuid())
  title              String
  description        String?
  classId            String
  subjectId          String
  teacherId          String
  dueDate            DateTime?
  additionalMetadata Json?        @default("{}")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  createdById        String?      @db.Uuid
  updatedById        String?      @db.Uuid
  deletedById        String?      @db.Uuid
  class              Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject            Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher            Teacher      @relation(fields: [teacherId], references: [id], onDelete: SetNull)
  submissions        Submission[]

  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
  @@index([dueDate])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Submission {
  id           String     @id @default(uuid())
  assignmentId String
  studentId    String
  submittedAt  DateTime?  @default(now())
  isCompleted  Boolean    @default(false)
  feedback     String?
  fileLinks    Json?      @default("[]")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  createdById  String?    @db.Uuid
  updatedById  String?    @db.Uuid
  deletedById  String?    @db.Uuid
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([isCompleted])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

enum CalendarEntryType {
  HOLIDAY
  EVENT
  EXAM
}

enum HolidayType {
  NATIONAL
  SCHOOL
}

enum ExamType {
  FIRST_TERM
  SECOND_TERM
  THIRD_TERM
  FINAL
  UNIT_TEST
  OTHER
}

enum ClassShift {
  MORNING
  DAY
}

enum SalaryChangeType {
  INITIAL
  PROMOTION
  DEMOTION
  ADJUSTMENT
}

model TeacherSalaryHistory {
  id             String          @id @default(uuid())
  teacherId      String
  effectiveMonth DateTime        @db.Date
  basicSalary    Decimal         @db.Decimal(10, 2)
  allowances     Decimal         @db.Decimal(10, 2)
  totalSalary    Decimal         @db.Decimal(10, 2)
  changeType     SalaryChangeType @default(INITIAL)
  changeReason   String?
  approvedById   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdById    String?         @db.Uuid
  updatedById    String?         @db.Uuid
  deletedById    String?         @db.Uuid
  
  teacher        Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  approvedBy     User?           @relation("SalaryApprover", fields: [approvedById], references: [id])

  @@index([teacherId])
  @@index([effectiveMonth])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([approvedById])
}

model StaffSalaryHistory {
  id             String          @id @default(uuid())
  staffId        String
  effectiveMonth DateTime        @db.Date
  basicSalary    Decimal         @db.Decimal(10, 2)
  allowances     Decimal         @db.Decimal(10, 2)
  totalSalary    Decimal         @db.Decimal(10, 2)
  changeType     SalaryChangeType @default(INITIAL)
  changeReason   String?
  approvedById   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdById    String?         @db.Uuid
  updatedById    String?         @db.Uuid
  deletedById    String?         @db.Uuid
  
  staff          Staff           @relation(fields: [staffId], references: [id], onDelete: Cascade)
  approvedBy     User?           @relation("StaffSalaryApprover", fields: [approvedById], references: [id])

  @@index([staffId])
  @@index([effectiveMonth])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([approvedById])
}

// Notice Management Enums
enum NoticePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NoticeRecipientType {
  ALL
  STUDENT
  PARENT
  TEACHER
  STAFF
  CLASS
}

enum NoticeCategory {
  GENERAL
  ACADEMIC
  EXAMINATION
  FEE
  EVENT
  HOLIDAY
  MEETING
  ANNOUNCEMENT
  URGENT
  OTHER
}

enum NoticeStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  EXPIRED
}

// Notice Management Models
model Notice {
  id                    String              @id @default(uuid())
  title                 String
  content               String
  priority              NoticePriority
  recipientType         NoticeRecipientType
  selectedClassId       String?
  category              NoticeCategory?
  publishDate           DateTime
  expiryDate            DateTime
  status                NoticeStatus        @default(DRAFT)
  sendEmailNotification Boolean             @default(false)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?
  deletedAt             DateTime?
  createdById           String?
  updatedById           String?
  deletedById           String?

  // Relationships
  selectedClass         Class?              @relation("NoticeClass", fields: [selectedClassId], references: [id])
  createdBy             User?               @relation("NoticeCreator", fields: [createdById], references: [id])
  updatedBy             User?               @relation("NoticeUpdater", fields: [updatedById], references: [id])
  deletedBy             User?               @relation("NoticeDeleter", fields: [deletedById], references: [id])
  recipients            NoticeRecipient[]
  attachments           NoticeAttachment[]

  @@index([recipientType])
  @@index([priority])
  @@index([category])
  @@index([status])
  @@index([publishDate])
  @@index([expiryDate])
  @@index([selectedClassId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model NoticeRecipient {
  id        String   @id @default(uuid())
  noticeId  String
  userId    String
  readAt    DateTime?
  createdAt DateTime @default(now())

  // Relationships
  notice    Notice   @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noticeId, userId])
  @@index([noticeId])
  @@index([userId])
  @@index([readAt])
}

model NoticeAttachment {
  id           String   @id @default(uuid())
  noticeId     String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  uploadedAt   DateTime @default(now())

  // Relationships
  notice       Notice   @relation(fields: [noticeId], references: [id], onDelete: Cascade)

  @@index([noticeId])
  @@index([mimeType])
}
