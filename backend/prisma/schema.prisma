generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// üîê Core User Management
// =========================

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  phone        String? @unique
  passwordHash String
  fullName     String

  isActive           Boolean   @default(true)
  lastLoginAt        DateTime?
  lastPasswordChange DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  roles     UserRole[]
  sessions  UserSession[]
  auditLogs AuditLog[]

  teacher Teacher?

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Role {
  id           String  @id @default(uuid())
  name         String  @unique
  description  String?
  isSystemRole Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  users       UserRole[]
  permissions RolePermission[]

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Permission {
  id          String  @id @default(uuid())
  code        String  @unique
  description String?
  module      String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  roles RolePermission[]

  @@index([code])
  @@index([module])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  assignedAt DateTime @default(now())

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RolePermission {
  id     String @id @default(uuid())
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  grantedAt DateTime @default(now())

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserSession {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  tokenHash         String
  userAgent         String?
  ipAddress         String?
  deviceFingerprint String?

  loginAt   DateTime  @default(now())
  expiresAt DateTime?
  revokedAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([userId])
  @@index([expiresAt])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  module    String?
  status    String   @default("SUCCESS")
  details   Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([module])
  @@index([timestamp])
}

// =========================
// üßë‚Äçüè´ Teacher Module
// =========================

enum TeacherEmploymentStatus {
  active
  on_leave
  resigned
  terminated
}

model Teacher {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  designation      String?
  qualification    String?
  employmentDate   DateTime?
  employmentStatus TeacherEmploymentStatus @default(active)

  department         String?
  additionalMetadata Json?   @default("{}")

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  profile          TeacherProfile?
  subjects         TeacherSubject[]
  classAssignments TeacherClass[]

  @@index([userId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherProfile {
  id        String  @id @default(uuid())
  teacherId String  @unique
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  bio             String?
  profilePhotoUrl String?
  contactInfo     Json    @default("{}")
  socialLinks     Json    @default("{}")
  additionalData  Json    @default("{}")

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([teacherId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Subject {
  id          String  @id @default(uuid())
  name        String
  code        String  @unique
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  teacherSubjects TeacherSubject[]

  @@index([code])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherSubject {
  id        String  @id @default(uuid())
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([teacherId, subjectId])
  @@index([teacherId])
  @@index([subjectId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// =========================
// üè´ Class & Section Module
// =========================

model Class {
  id      String  @id @default(uuid())
  name    String  // e.g., "Grade 10"

  sections Section[]
  teacherAssignments TeacherClass[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@index([name])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Section {
  id      String  @id @default(uuid())
  name    String
  classId String
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  teacherAssignments TeacherClass[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([name, classId])
  @@index([classId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherClass {
  id        String @id @default(uuid())
  teacherId String
  classId   String
  sectionId String?

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  section Section? @relation(fields: [sectionId], references: [id], onDelete: SetNull)

  assignedAt DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  @@unique([teacherId, classId, sectionId])
  @@index([teacherId])
  @@index([classId])
  @@index([sectionId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}
