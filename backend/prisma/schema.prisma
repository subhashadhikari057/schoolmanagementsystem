generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                        @id @default(uuid())
  email                           String                        @unique
  phone                           String?                       @unique
  passwordHash                    String
  fullName                        String
  isActive                        Boolean                       @default(true)
  lastLoginAt                     DateTime?
  lastPasswordChange              DateTime?
  needPasswordChange              Boolean                       @default(false)
  createdAt                       DateTime                      @default(now())
  updatedAt                       DateTime?
  deletedAt                       DateTime?
  createdById                     String?                       @db.Uuid
  updatedById                     String?                       @db.Uuid
  deletedById                     String?                       @db.Uuid
  attendanceSessionsMarked        AttendanceSession[]
  auditLogs                       AuditLog[]
  complaintsAsAssigned            Complaint[]                   @relation("ComplaintAssignedTo")
  complaintsAsComplainant         Complaint[]                   @relation("ComplaintComplainant")
  complaintsCreated               Complaint[]                   @relation("ComplaintCreator")
  complaintsDeleted               Complaint[]                   @relation("ComplaintDeleter")
  complaintsAsRecipient           Complaint[]                   @relation("ComplaintRecipient")
  complaintsUpdated               Complaint[]                   @relation("ComplaintUpdater")
  complaintAuditLogs              ComplaintAuditLog[]
  complaintResponses              ComplaintResponse[]
  idCards                         IDCard[]
  leaveRequestsCreated            LeaveRequest[]                @relation("LeaveRequestCreator")
  leaveRequestsDeleted            LeaveRequest[]                @relation("LeaveRequestDeleter")
  leaveRequestsUpdated            LeaveRequest[]                @relation("LeaveRequestUpdater")
  leaveRequestAuditLogs           LeaveRequestAuditLog[]
  leaveTypesCreated               LeaveType[]                   @relation("LeaveTypeCreator")
  leaveTypesDeleted               LeaveType[]                   @relation("LeaveTypeDeleter")
  leaveTypesUpdated               LeaveType[]                   @relation("LeaveTypeUpdater")
  noticesCreated                  Notice[]                      @relation("NoticeCreator")
  noticesDeleted                  Notice[]                      @relation("NoticeDeleter")
  noticesUpdated                  Notice[]                      @relation("NoticeUpdater")
  noticesReceived                 NoticeRecipient[]
  parent                          Parent?
  staff                           Staff?
  staffAttendanceSessionsMarked   StaffAttendanceSession[]      @relation("StaffAttendanceMarkedBy")
  staffSalaryApprovals            StaffSalaryHistory[]          @relation("StaffSalaryApprover")
  student                         Student?
  teacher                         Teacher?
  teacherAttendanceSessionsMarked TeacherAttendanceSession[]    @relation("TeacherAttendanceMarkedBy")
  teacherLeaveRequestsAsAdmin     TeacherLeaveRequest[]         @relation("TeacherLeaveRequestAdmin")
  teacherLeaveRequestsCreated     TeacherLeaveRequest[]         @relation("TeacherLeaveRequestCreator")
  teacherLeaveRequestsDeleted     TeacherLeaveRequest[]         @relation("TeacherLeaveRequestDeleter")
  teacherLeaveRequestsUpdated     TeacherLeaveRequest[]         @relation("TeacherLeaveRequestUpdater")
  teacherLeaveRequestAuditLogs    TeacherLeaveRequestAuditLog[]
  teacherLeaveUsageCreated        TeacherLeaveUsage[]           @relation("TeacherLeaveUsageCreator")
  teacherLeaveUsageDeleted        TeacherLeaveUsage[]           @relation("TeacherLeaveUsageDeleter")
  teacherLeaveUsageUpdated        TeacherLeaveUsage[]           @relation("TeacherLeaveUsageUpdater")
  teacherSalaryApprovals          TeacherSalaryHistory[]        @relation("SalaryApprover")
  roles                           UserRole[]
  sessions                        UserSession[]
  examResultsGraded               ExamResult[]                  @relation("ExamResultGradedBy")
  examResultsModified             ExamResult[]                  @relation("ExamResultModifiedBy")
  gradeHistoryEntries             StudentGradeHistory[]         @relation("StudentGradeHistoryGradedBy")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([fullName])
  @@index([email])
}

model Subject {
  id                 String                @id @default(uuid())
  name               String
  code               String
  description        String?
  maxMarks           Int
  passMarks          Int
  createdAt          DateTime              @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  createdById        String?               @db.Uuid
  updatedById        String?               @db.Uuid
  deletedById        String?               @db.Uuid
  assignments        Assignment[]
  assignedClasses    ClassSubject[]
  scheduleSlots      ScheduleSlot[]
  teacherAssignments TeacherSubject[]      @relation("SubjectTeacherAssignments")
  examSlots          ExamSlot[]
  gradingPermissions GradingPermission[]
  gradeHistory       StudentGradeHistory[]

  @@unique([code, deletedAt], name: "unique_subject_code_when_active")
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Class {
  id                      String                   @id @default(uuid())
  name                    String?
  grade                   Int
  section                 String
  capacity                Int
  currentEnrollment       Int                      @default(0)
  shift                   ClassShift               @default(MORNING)
  status                  String                   @default("active")
  roomId                  String
  classTeacherId          String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime?
  deletedAt               DateTime?
  createdById             String?                  @db.Uuid
  updatedById             String?                  @db.Uuid
  deletedById             String?                  @db.Uuid
  assignments             Assignment[]
  attendanceSessions      AttendanceSession[]
  classTeacher            Teacher                  @relation("ClassTeacher", fields: [classTeacherId], references: [id])
  room                    Classroom                @relation(fields: [roomId], references: [id])
  schedules               ClassSchedule[]
  assignedSubjects        ClassSubject[]
  timeslots               ClassTimeslot[]
  feeStructures           FeeStructure[]
  feeStructureAssignments FeeStructureAssignment[]
  notices                 Notice[]                 @relation("NoticeClass")
  students                Student[]
  teacherAssignments      TeacherClass[]           @relation("ClassTeacherAssignments")
  examSchedules           ExamSchedule[]
  gradingPermissions      GradingPermission[]
  gradeHistory            StudentGradeHistory[]

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([grade])
  @@index([section])
  @@index([shift])
}

model Classroom {
  id            String                @id @default(uuid())
  roomNo        String                @unique
  name          String?
  capacity      Int                   @default(30)
  floor         Int                   @default(1)
  building      String?
  note          String?
  status        String                @default("active")
  isAvailable   Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdById   String?               @db.Uuid
  updatedById   String?               @db.Uuid
  deletedById   String?               @db.Uuid
  classes       Class[]
  scheduleSlots ScheduleSlot[]
  examSlots     ExamSlot[]

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([status])
  @@index([isAvailable])
}

model ClassSubject {
  id          String    @id @default(uuid())
  classId     String
  subjectId   String
  teacherId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  deletedById String?   @db.Uuid
  class       Class     @relation(fields: [classId], references: [id])
  subject     Subject   @relation(fields: [subjectId], references: [id])
  teacher     Teacher?  @relation("TeacherClassSubjects", fields: [teacherId], references: [id])

  @@unique([classId, subjectId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Student {
  id                     String                  @id @default(uuid())
  userId                 String                  @unique
  classId                String
  rollNumber             String
  admissionDate          DateTime
  email                  String
  dob                    DateTime
  gender                 String
  bloodGroup             String?
  ethnicity              String?
  imageUrl               String?
  fatherPhone            String?
  motherPhone            String?
  fatherEmail            String?
  motherEmail            String?
  fatherOccupation       String?
  motherOccupation       String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime?
  deletedAt              DateTime?
  academicStatus         String                  @default("active")
  address                String?
  allergies              String?
  city                   String?
  createdById            String?                 @db.Uuid
  dateOfBirth            DateTime?
  deletedById            String?                 @db.Uuid
  feeStatus              String                  @default("pending")
  interests              String?
  maritalStatus          String?                 @default("Single")
  medicalConditions      String?
  phone                  String?
  pinCode                String?
  profilePhotoUrl        String?
  specialNeeds           String?
  state                  String?
  street                 String?
  studentId              String?                 @unique
  transportMode          String?
  updatedById            String?                 @db.Uuid
  fatherFirstName        String?
  fatherMiddleName       String?
  fatherLastName         String?
  motherFirstName        String?
  motherMiddleName       String?
  motherLastName         String?
  attendanceRecords      AttendanceRecord[]
  chargeAssignments      ChargeAssignment[]
  guardians              Guardian[]
  leaveRequests          LeaveRequest[]
  parents                ParentStudentLink[]
  scholarshipAssignments ScholarshipAssignment[]
  class                  Class                   @relation(fields: [classId], references: [id])
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  feeHistories           StudentFeeHistory[]
  profile                StudentProfile?
  submissions            Submission[]
  examResults            ExamResult[]
  gradeHistory           StudentGradeHistory[]

  @@unique([classId, rollNumber])
  @@index([userId])
  @@index([classId])
  @@index([rollNumber])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([academicStatus])
  @@index([ethnicity])
  @@index([feeStatus])
}

model StudentProfile {
  id               String    @id @default(uuid())
  studentId        String    @unique
  emergencyContact Json      @default("{}")
  interests        Json      @default("{}")
  additionalData   Json      @default("{}")
  profilePhotoUrl  String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  student          Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Guardian {
  id        String   @id @default(uuid())
  studentId String
  fullName  String
  phone     String
  email     String
  relation  String
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Parent {
  id                           String              @id @default(uuid())
  userId                       String              @unique
  dateOfBirth                  DateTime?
  gender                       String?
  occupation                   String?
  workPlace                    String?
  workPhone                    String?
  emergencyContactName         String?
  emergencyContactPhone        String?
  emergencyContactRelationship String?
  street                       String?
  city                         String?
  state                        String?
  pinCode                      String?
  country                      String?
  notes                        String?
  specialInstructions          String?
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime?
  deletedAt                    DateTime?
  createdById                  String?             @db.Uuid
  updatedById                  String?             @db.Uuid
  deletedById                  String?             @db.Uuid
  leaveRequestsApproved        LeaveRequest[]
  user                         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile                      ParentProfile?
  children                     ParentStudentLink[] @relation("ParentChildren")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ParentProfile {
  id              String    @id @default(uuid())
  parentId        String    @unique
  profilePhotoUrl String?
  bio             String?
  socialLinks     Json?     @default("{}")
  additionalData  Json?     @default("{}")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  parent          Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model ParentStudentLink {
  id           String    @id @default(uuid())
  parentId     String
  studentId    String
  relationship String
  isPrimary    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime?
  parent       Parent    @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId], name: "parentId_studentId")
  @@index([parentId])
  @@index([studentId])
}

model Teacher {
  id                             String                          @id @default(uuid())
  userId                         String                          @unique
  employeeId                     String?                         @unique
  joiningDate                    DateTime
  experienceYears                Int?
  qualification                  String?
  designation                    String
  dob                            DateTime
  gender                         String
  bloodGroup                     String?
  maritalStatus                  String?
  imageUrl                       String?
  department                     String?
  specialization                 String?
  employmentStatus               String?                         @default("active")
  employmentDate                 DateTime?
  dateOfBirth                    DateTime?
  address                        String?
  basicSalary                    Decimal                         @db.Decimal(10, 2)
  allowances                     Decimal                         @db.Decimal(10, 2)
  totalSalary                    Decimal                         @db.Decimal(10, 2)
  isClassTeacher                 Boolean                         @default(false)
  languagesKnown                 Json?                           @default("[]")
  certifications                 String?
  previousExperience             String?
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime?
  deletedAt                      DateTime?
  createdById                    String?                         @db.Uuid
  updatedById                    String?                         @db.Uuid
  deletedById                    String?                         @db.Uuid
  bankAccountNumber              String?
  bankBranch                     String?
  bankName                       String?
  citizenshipNumber              String?
  panNumber                      String?
  assignments                    Assignment[]
  classesAsTeacher               Class[]                         @relation("ClassTeacher")
  classSubjects                  ClassSubject[]                  @relation("TeacherClassSubjects")
  leaveRequestsApproved          LeaveRequest[]
  scheduleSlots                  ScheduleSlot[]
  user                           User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendanceRecords              TeacherAttendanceRecord[]       @relation("TeacherAttendanceRecords")
  classAssignments               TeacherClass[]                  @relation("TeacherClassAssignments")
  teacherLeaveRequests           TeacherLeaveRequest[]
  teacherLeaveRequestAttachments TeacherLeaveRequestAttachment[]
  leaveUsage                     TeacherLeaveUsage[]
  profile                        TeacherProfile?
  salaryHistory                  TeacherSalaryHistory[]
  subjectAssignments             TeacherSubject[]                @relation("TeacherSubjectAssignments")
  gradingPermissions             GradingPermission[]

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherProfile {
  id              String    @id @default(uuid())
  teacherId       String    @unique
  profilePhotoUrl String?
  bio             String?
  contactInfo     Json?     @default("{}")
  socialLinks     Json?     @default("{}")
  additionalData  Json?     @default("{}")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  teacher         Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model TeacherSubject {
  id          String    @id @default(uuid())
  teacherId   String
  subjectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  deletedById String?   @db.Uuid
  subject     Subject   @relation("SubjectTeacherAssignments", fields: [subjectId], references: [id])
  teacher     Teacher   @relation("TeacherSubjectAssignments", fields: [teacherId], references: [id])

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherClass {
  id          String    @id @default(uuid())
  teacherId   String
  classId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  deletedById String?   @db.Uuid
  class       Class     @relation("ClassTeacherAssignments", fields: [classId], references: [id])
  teacher     Teacher   @relation("TeacherClassAssignments", fields: [teacherId], references: [id])

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Staff {
  id                String                  @id @default(uuid())
  userId            String?                 @unique
  email             String
  fullName          String
  firstName         String
  middleName        String?
  lastName          String
  employeeId        String?                 @unique
  dob               DateTime
  gender            String
  bloodGroup        String?
  phone             String
  emergencyContact  String
  maritalStatus     String?
  designation       String?
  department        String?
  employmentDate    DateTime?
  joiningDate       DateTime?
  basicSalary       Decimal                 @db.Decimal(10, 2)
  allowances        Decimal                 @db.Decimal(10, 2)
  totalSalary       Decimal                 @db.Decimal(10, 2)
  permissions       String[]
  createdAt         DateTime                @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  createdById       String?                 @db.Uuid
  updatedById       String?                 @db.Uuid
  deletedById       String?                 @db.Uuid
  bankAccountNumber String?
  bankBranch        String?
  bankName          String?
  citizenshipNumber String?
  panNumber         String?
  employmentStatus  String?                 @default("active")
  experienceYears   Int?
  user              User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendanceRecords StaffAttendanceRecord[] @relation("StaffAttendanceRecords")
  profile           StaffProfile?
  salaryHistory     StaffSalaryHistory[]

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model StaffProfile {
  id              String    @id @default(uuid())
  staffId         String    @unique
  profilePhotoUrl String?
  bio             String?
  contactInfo     Json?     @default("{}")
  additionalData  Json?     @default("{}")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  staff           Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model IDCard {
  id          String         @id @default(uuid())
  type        String
  templateId  String
  expiryDate  DateTime
  batchName   String?
  issuedForId String
  isActive    Boolean        @default(true)
  qrCodeData  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  issuedFor   User           @relation(fields: [issuedForId], references: [id])
  template    IDCardTemplate @relation("IDCardTemplates", fields: [templateId], references: [id])

  @@unique([issuedForId, type, isActive], name: "unique_active_card_per_user_type")
  @@index([type])
  @@index([templateId])
  @@index([issuedForId])
  @@index([qrCodeData])
}

model IDCardTemplate {
  id              String                @id @default(uuid())
  name            String
  type            IDCardTemplateType
  description     String?
  dimensions      String
  customWidth     Float?
  customHeight    Float?
  orientation     TemplateOrientation   @default(HORIZONTAL)
  backgroundColor String                @default("#ffffff")
  backgroundImage String?
  borderColor     String                @default("#000000")
  borderWidth     Int                   @default(1)
  borderRadius    Int                   @default(0)
  logoRequired    Boolean               @default(true)
  photoRequired   Boolean               @default(true)
  qrCodeRequired  Boolean               @default(true)
  barcodeRequired Boolean               @default(false)
  watermark       String?
  printMargin     Int                   @default(5)
  bleedArea       Int                   @default(3)
  safeArea        Int                   @default(5)
  status          TemplateStatus        @default(DRAFT)
  usageCount      Int                   @default(0)
  isDefault       Boolean               @default(false)
  features        Json?                 @default("[]")
  metadata        Json?                 @default("{}")
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  deletedAt       DateTime?
  createdById     String?               @db.Uuid
  updatedById     String?               @db.Uuid
  deletedById     String?               @db.Uuid
  idCards         IDCard[]              @relation("IDCardTemplates")
  fields          IDCardTemplateField[]

  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model IDCardTemplateField {
  id              String            @id @default(uuid())
  templateId      String
  fieldType       TemplateFieldType
  label           String
  databaseField   String?
  x               Float
  y               Float
  width           Float
  height          Float
  fontSize        Int?
  fontWeight      String?
  textAlign       TextAlignment?    @default(LEFT)
  fontFamily      String?           @default("Inter")
  color           String?           @default("#000000")
  backgroundColor String?
  borderWidth     Int?              @default(0)
  borderColor     String?           @default("#cccccc")
  borderRadius    Int?              @default(0)
  required        Boolean           @default(false)
  placeholder     String?
  rotation        Float?            @default(0)
  opacity         Int?              @default(100)
  zIndex          Int?              @default(1)
  dataSource      String?
  staticText      String?
  imageUrl        String?
  qrData          String?
  validationRules Json?             @default("{}")
  styleOptions    Json?             @default("{}")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  template        IDCardTemplate    @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([fieldType])
  @@index([databaseField])
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Role {
  id           String           @id @default(uuid())
  name         String           @unique
  description  String?
  isSystemRole Boolean          @default(false)
  permissions  RolePermission[]
  userRoles    UserRole[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
}

model Permission {
  id              String           @id @default(uuid())
  code            String           @unique
  description     String?
  rolePermissions RolePermission[]
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  module    String?
  timestamp DateTime @default(now())
  status    String   @default("SUCCESS")
  details   Json?
  ipAddress String?
  userAgent String?
  user      User?    @relation(fields: [userId], references: [id])
}

model UserSession {
  id                String    @id @default(uuid())
  userId            String
  tokenHash         String
  loginAt           DateTime  @default(now())
  lastActivityAt    DateTime?
  revokedAt         DateTime?
  ipAddress         String?
  userAgent         String?
  deviceInfo        String?
  isCurrentDevice   Boolean   @default(false)
  previousTokenHash String?
  revokeReason      String?
  user              User      @relation(fields: [userId], references: [id])
}

model CalendarEntry {
  id                   String                @id @default(uuid())
  type                 CalendarEntryType
  eventScope           EventScope?
  startDate            DateTime
  endDate              DateTime
  venue                String?
  holidayType          HolidayType?
  startTime            String?
  endTime              String?
  examType             ExamType?
  examDetails          String?
  emergencyClosureType EmergencyClosureType?
  emergencyReason      String?
  affectedAreas        String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?
  deletedAt            DateTime?
  createdById          String?               @db.Uuid
  updatedById          String?               @db.Uuid
  deletedById          String?               @db.Uuid
  name                 String
  examSchedules        ExamSchedule[]
  examDateslots        ExamDateslot[]

  @@index([type])
  @@index([eventScope])
  @@index([startDate])
  @@index([endDate])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Assignment {
  id                 String                 @id @default(uuid())
  title              String
  description        String?
  classId            String
  subjectId          String
  teacherId          String
  dueDate            DateTime?
  additionalMetadata Json?                  @default("{}")
  createdAt          DateTime               @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  createdById        String?                @db.Uuid
  updatedById        String?                @db.Uuid
  deletedById        String?                @db.Uuid
  class              Class                  @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject            Subject                @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher            Teacher                @relation(fields: [teacherId], references: [id], onDelete: SetNull)
  submissions        Submission[]
  attachments        AssignmentAttachment[]

  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
  @@index([dueDate])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Submission {
  id           String                 @id @default(uuid())
  assignmentId String
  studentId    String
  submittedAt  DateTime?              @default(now())
  isCompleted  Boolean                @default(false)
  feedback     String? // Teacher's grading remarks
  studentNotes String? // Student's submission comments
  fileLinks    Json?                  @default("[]")
  createdAt    DateTime               @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  createdById  String?                @db.Uuid
  updatedById  String?                @db.Uuid
  deletedById  String?                @db.Uuid
  assignment   Assignment             @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      Student                @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attachments  SubmissionAttachment[]

  @@unique([assignmentId, studentId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([isCompleted])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model AssignmentAttachment {
  id           String   @id @default(uuid())
  assignmentId String
  filename     String
  originalName String
  mimeType     String
  size         Int // Size in bytes (max 10MB = 10,485,760 bytes)
  url          String
  uploadedAt   DateTime @default(now())

  // Relationships
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([assignmentId])
  @@index([mimeType])
  @@index([size])
}

model SubmissionAttachment {
  id           String   @id @default(uuid())
  submissionId String
  filename     String
  originalName String
  mimeType     String
  size         Int // Size in bytes (max 10MB = 10,485,760 bytes)
  url          String
  uploadedAt   DateTime @default(now())

  // Relationships
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([mimeType])
  @@index([size])
}

enum CalendarEntryType {
  HOLIDAY
  EVENT
  EXAM
  EMERGENCY_CLOSURE
}

enum HolidayType {
  NATIONAL
  SCHOOL
}

enum ExamType {
  FIRST_TERM
  SECOND_TERM
  THIRD_TERM
  FINAL
  UNIT_TEST
  OTHER
}

enum EmergencyClosureType {
  NATURAL_DISASTER
  STRIKE
  PANDEMIC
  POWER_OUTAGE
  SECURITY_CONCERN
  INFRASTRUCTURE_DAMAGE
  WEATHER_EMERGENCY
  OTHER
}

enum EventScope {
  PARTIAL
  SCHOOL_WIDE
}

enum ClassShift {
  MORNING
  DAY
}

enum SalaryChangeType {
  INITIAL
  PROMOTION
  DEMOTION
  ADJUSTMENT
}

enum TimeslotType {
  REGULAR
  BREAK
  LUNCH
  ACTIVITY
  STUDY_HALL
  FREE_PERIOD
}

enum ExamDateslotType {
  EXAM
  BREAK
  LUNCH
  PREPARATION
}

model ClassTimeslot {
  id            String         @id @default(uuid())
  classId       String
  day           String
  startTime     String
  endTime       String
  type          TimeslotType   @default(REGULAR)
  label         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdById   String?        @db.Uuid
  updatedById   String?        @db.Uuid
  deletedById   String?        @db.Uuid
  class         Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  scheduleSlots ScheduleSlot[]

  @@index([classId])
  @@index([day])
  @@index([type])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ClassSchedule {
  id            String         @id @default(uuid())
  classId       String
  name          String
  academicYear  String
  startDate     DateTime
  endDate       DateTime
  effectiveFrom DateTime
  status        String         @default("draft")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdById   String?        @db.Uuid
  updatedById   String?        @db.Uuid
  deletedById   String?        @db.Uuid
  class         Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  scheduleSlots ScheduleSlot[]

  @@unique([classId, status], name: "unique_active_schedule_per_class")
  @@index([classId])
  @@index([academicYear])
  @@index([status])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ScheduleSlot {
  id          String        @id @default(uuid())
  scheduleId  String
  timeslotId  String
  day         String
  subjectId   String?
  teacherId   String?
  roomId      String?
  type        TimeslotType  @default(REGULAR)
  hasConflict Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?       @db.Uuid
  updatedById String?       @db.Uuid
  deletedById String?       @db.Uuid
  room        Classroom?    @relation(fields: [roomId], references: [id])
  schedule    ClassSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  subject     Subject?      @relation(fields: [subjectId], references: [id])
  teacher     Teacher?      @relation(fields: [teacherId], references: [id])
  timeslot    ClassTimeslot @relation(fields: [timeslotId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([timeslotId])
  @@index([day])
  @@index([subjectId])
  @@index([teacherId])
  @@index([roomId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ExamSchedule {
  id              String        @id @default(uuid())
  classId         String
  calendarEntryId String
  name            String
  academicYear    String
  status          String        @default("draft")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  createdById     String?       @db.Uuid
  updatedById     String?       @db.Uuid
  deletedById     String?       @db.Uuid
  class           Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  calendarEntry   CalendarEntry @relation(fields: [calendarEntryId], references: [id], onDelete: Cascade)
  examSlots       ExamSlot[]

  @@unique([classId, calendarEntryId], name: "unique_exam_schedule_per_class_exam")
  @@index([classId])
  @@index([calendarEntryId])
  @@index([academicYear])
  @@index([status])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ExamDateslot {
  id              String           @id @default(uuid())
  calendarEntryId String
  examDate        DateTime         @db.Date
  startTime       String?
  endTime         String?
  label           String?
  type            ExamDateslotType @default(EXAM)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  createdById     String?          @db.Uuid
  updatedById     String?          @db.Uuid
  deletedById     String?          @db.Uuid
  calendarEntry   CalendarEntry    @relation(fields: [calendarEntryId], references: [id], onDelete: Cascade)
  examSlots       ExamSlot[]

  @@unique([calendarEntryId, examDate, startTime, endTime], name: "unique_exam_dateslot")
  @@index([calendarEntryId])
  @@index([examDate])
  @@index([type])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ExamSlot {
  id             String                @id @default(uuid())
  examScheduleId String
  dateslotId     String
  subjectId      String?
  roomId         String?
  duration       Int? // Duration in minutes
  instructions   String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdById    String?               @db.Uuid
  updatedById    String?               @db.Uuid
  deletedById    String?               @db.Uuid
  dateslot       ExamDateslot          @relation(fields: [dateslotId], references: [id], onDelete: Cascade)
  examSchedule   ExamSchedule          @relation(fields: [examScheduleId], references: [id], onDelete: Cascade)
  room           Classroom?            @relation(fields: [roomId], references: [id])
  subject        Subject?              @relation(fields: [subjectId], references: [id])
  examResults    ExamResult[]
  gradeHistory   StudentGradeHistory[]

  @@index([examScheduleId])
  @@index([dateslotId])
  @@index([subjectId])
  @@index([roomId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

// Grading System Models
model GradingScale {
  id               String            @id @default(uuid())
  academicYear     String // Academic year as string e.g., "2024-2025"
  name             String // e.g., "Standard Grading", "Advanced Grading"
  description      String?
  isDefault        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  createdById      String?           @db.Uuid
  updatedById      String?           @db.Uuid
  deletedById      String?           @db.Uuid
  gradeDefinitions GradeDefinition[]

  @@unique([academicYear, name])
  @@index([academicYear])
  @@index([isDefault])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model GradeDefinition {
  id             String       @id @default(uuid())
  gradingScaleId String
  grade          String // e.g., "A+", "A", "B+", "B", etc.
  minMarks       Decimal      @db.Decimal(5, 2)
  maxMarks       Decimal      @db.Decimal(5, 2)
  gradePoint     Decimal?     @db.Decimal(3, 2) // GPA equivalent
  description    String?
  color          String? // For UI display
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdById    String?      @db.Uuid
  updatedById    String?      @db.Uuid
  deletedById    String?      @db.Uuid
  gradingScale   GradingScale @relation(fields: [gradingScaleId], references: [id], onDelete: Cascade)
  examResults    ExamResult[]

  @@unique([gradingScaleId, grade])
  @@index([gradingScaleId])
  @@index([minMarks])
  @@index([maxMarks])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ExamResult {
  id                  String               @id @default(uuid())
  examSlotId          String
  studentId           String
  marksObtained       Decimal?             @db.Decimal(5, 2)
  gradeId             String?
  remarks             String?
  isAbsent            Boolean              @default(false)
  isPassed            Boolean              @default(false)
  status              ExamResultStatus     @default(DRAFT)
  gradedAt            DateTime?
  gradedById          String?
  lastModifiedAt      DateTime?
  lastModifiedById    String?
  modificationHistory Json? // Track all modifications with timestamps and reasons
  createdAt           DateTime             @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  createdById         String?
  updatedById         String?
  deletedById         String?
  examSlot            ExamSlot             @relation(fields: [examSlotId], references: [id], onDelete: Cascade)
  student             Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  grade               GradeDefinition?     @relation(fields: [gradeId], references: [id])
  gradedBy            User?                @relation("ExamResultGradedBy", fields: [gradedById], references: [id])
  lastModifiedBy      User?                @relation("ExamResultModifiedBy", fields: [lastModifiedById], references: [id])
  gradeHistory        StudentGradeHistory?

  @@unique([examSlotId, studentId])
  @@index([examSlotId])
  @@index([studentId])
  @@index([gradeId])
  @@index([status])
  @@index([gradedById])
  @@index([lastModifiedById])
  @@index([gradedAt])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model GradingPermission {
  id          String    @id @default(uuid())
  teacherId   String
  subjectId   String
  classId     String
  canGrade    Boolean   @default(true)
  canModify   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  deletedById String?   @db.Uuid
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId, classId])
  @@index([teacherId])
  @@index([subjectId])
  @@index([classId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model StudentGradeHistory {
  id            String     @id @default(uuid())
  studentId     String
  examResultId  String     @unique
  classId       String // Class at the time of exam
  subjectId     String // Subject
  examSlotId    String // Specific exam slot
  academicYear  String // Academic year (e.g., "2024-2025")
  examType      String // MIDTERM, FINAL, QUIZ, etc.
  examName      String // Name of the exam
  examDate      DateTime   @db.Date
  marksObtained Decimal?   @db.Decimal(5, 2)
  maxMarks      Decimal    @db.Decimal(5, 2)
  passMarks     Decimal    @db.Decimal(5, 2)
  percentage    Decimal?   @db.Decimal(5, 2)
  gradeObtained String? // Grade like "A+", "B", etc.
  gradePoint    Decimal?   @db.Decimal(3, 2)
  isPassed      Boolean    @default(false)
  isAbsent      Boolean    @default(false)
  remarks       String?
  gradedAt      DateTime?
  gradedById    String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdById   String?    @db.Uuid
  updatedById   String?    @db.Uuid
  deletedById   String?    @db.Uuid
  student       Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  examResult    ExamResult @relation(fields: [examResultId], references: [id], onDelete: Cascade)
  class         Class      @relation(fields: [classId], references: [id])
  subject       Subject    @relation(fields: [subjectId], references: [id])
  examSlot      ExamSlot   @relation(fields: [examSlotId], references: [id])
  gradedBy      User?      @relation("StudentGradeHistoryGradedBy", fields: [gradedById], references: [id])

  @@unique([studentId, examResultId])
  @@index([studentId])
  @@index([academicYear])
  @@index([classId])
  @@index([subjectId])
  @@index([examType])
  @@index([examDate])
  @@index([gradedById])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherSalaryHistory {
  id             String           @id @default(uuid())
  teacherId      String
  effectiveMonth DateTime         @db.Date
  basicSalary    Decimal          @db.Decimal(10, 2)
  allowances     Decimal          @db.Decimal(10, 2)
  totalSalary    Decimal          @db.Decimal(10, 2)
  changeType     SalaryChangeType @default(INITIAL)
  changeReason   String?
  approvedById   String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdById    String?          @db.Uuid
  updatedById    String?          @db.Uuid
  deletedById    String?          @db.Uuid
  approvedBy     User?            @relation("SalaryApprover", fields: [approvedById], references: [id])
  teacher        Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@index([effectiveMonth])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([approvedById])
}

model StaffSalaryHistory {
  id             String           @id @default(uuid())
  staffId        String
  effectiveMonth DateTime         @db.Date
  basicSalary    Decimal          @db.Decimal(10, 2)
  allowances     Decimal          @db.Decimal(10, 2)
  totalSalary    Decimal          @db.Decimal(10, 2)
  changeType     SalaryChangeType @default(INITIAL)
  changeReason   String?
  approvedById   String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdById    String?          @db.Uuid
  updatedById    String?          @db.Uuid
  deletedById    String?          @db.Uuid
  approvedBy     User?            @relation("StaffSalaryApprover", fields: [approvedById], references: [id])
  staff          Staff            @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId])
  @@index([effectiveMonth])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([approvedById])
}

model Notice {
  id                    String              @id @default(uuid())
  title                 String
  content               String
  priority              NoticePriority
  recipientType         NoticeRecipientType
  selectedClassId       String?
  category              NoticeCategory?
  publishDate           DateTime
  expiryDate            DateTime
  status                NoticeStatus        @default(DRAFT)
  sendEmailNotification Boolean             @default(false)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?
  deletedAt             DateTime?
  createdById           String?
  updatedById           String?
  deletedById           String?
  createdBy             User?               @relation("NoticeCreator", fields: [createdById], references: [id])
  deletedBy             User?               @relation("NoticeDeleter", fields: [deletedById], references: [id])
  selectedClass         Class?              @relation("NoticeClass", fields: [selectedClassId], references: [id])
  updatedBy             User?               @relation("NoticeUpdater", fields: [updatedById], references: [id])
  attachments           NoticeAttachment[]
  recipients            NoticeRecipient[]

  @@index([recipientType])
  @@index([priority])
  @@index([category])
  @@index([status])
  @@index([publishDate])
  @@index([expiryDate])
  @@index([selectedClassId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model NoticeRecipient {
  id        String    @id @default(uuid())
  noticeId  String
  userId    String
  readAt    DateTime?
  createdAt DateTime  @default(now())
  notice    Notice    @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noticeId, userId])
  @@index([noticeId])
  @@index([userId])
  @@index([readAt])
}

model NoticeAttachment {
  id           String   @id @default(uuid())
  noticeId     String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  uploadedAt   DateTime @default(now())
  notice       Notice   @relation(fields: [noticeId], references: [id], onDelete: Cascade)

  @@index([noticeId])
  @@index([mimeType])
}

model FeeStructure {
  id                  String                   @id @default(uuid())
  classId             String
  academicYear        String
  name                String
  status              FeeStructureStatus       @default(DRAFT)
  effectiveFrom       DateTime
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  createdById         String?                  @db.Uuid
  updatedById         String?                  @db.Uuid
  deletedById         String?                  @db.Uuid
  class               Class                    @relation(fields: [classId], references: [id], onDelete: Cascade)
  assignments         FeeStructureAssignment[]
  histories           FeeStructureHistory[]
  items               FeeStructureItem[]
  studentFeeHistories StudentFeeHistory[]

  @@index([classId])
  @@index([academicYear])
  @@index([status])
  @@index([effectiveFrom])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model FeeStructureAssignment {
  id             String       @id @default(uuid())
  feeStructureId String
  classId        String
  createdAt      DateTime     @default(now())
  deletedAt      DateTime?
  class          Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)

  @@unique([feeStructureId, classId])
  @@index([classId])
}

model FeeStructureItem {
  id             String           @id @default(uuid())
  feeStructureId String
  category       String
  label          String
  amount         Decimal          @db.Decimal(10, 2)
  frequency      FeeItemFrequency @default(MONTHLY)
  isOptional     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdById    String?          @db.Uuid
  updatedById    String?          @db.Uuid
  deletedById    String?          @db.Uuid
  feeStructure   FeeStructure     @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)

  @@index([feeStructureId])
  @@index([category])
  @@index([frequency])
}

model FeeStructureHistory {
  id             String       @id @default(uuid())
  feeStructureId String
  version        Int
  effectiveFrom  DateTime     @db.Date
  totalAnnual    Decimal      @db.Decimal(12, 2)
  snapshot       Json
  changeReason   String?
  createdAt      DateTime     @default(now())
  createdById    String?      @db.Uuid
  deletedAt      DateTime?
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)

  @@unique([feeStructureId, version])
  @@index([feeStructureId])
  @@index([effectiveFrom])
}

model ScholarshipDefinition {
  id                String                  @id @default(uuid())
  name              String
  type              ScholarshipType         @default(OTHER)
  description       String?
  valueType         ValueType               @default(PERCENTAGE)
  value             Decimal                 @db.Decimal(10, 2)
  appliesToCategory String?
  isActive          Boolean                 @default(true)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  createdById       String?                 @db.Uuid
  updatedById       String?                 @db.Uuid
  deletedById       String?                 @db.Uuid
  assignments       ScholarshipAssignment[]

  @@index([type])
  @@index([isActive])
}

model ScholarshipAssignment {
  id            String                @id @default(uuid())
  scholarshipId String
  studentId     String
  effectiveFrom DateTime              @db.Date
  expiresAt     DateTime?             @db.Date
  createdAt     DateTime              @default(now())
  createdById   String?               @db.Uuid
  deletedAt     DateTime?
  scholarship   ScholarshipDefinition @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)
  student       Student               @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([scholarshipId])
  @@index([studentId])
  @@index([effectiveFrom])
}

model ChargeDefinition {
  id          String             @id @default(uuid())
  name        String
  type        ChargeType         @default(FINE)
  category    String?
  description String?
  valueType   ValueType          @default(FIXED)
  value       Decimal            @db.Decimal(10, 2)
  isRecurring Boolean            @default(false)
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdById String?            @db.Uuid
  updatedById String?            @db.Uuid
  deletedById String?            @db.Uuid
  assignments ChargeAssignment[]

  @@index([type])
  @@index([isActive])
}

model ChargeAssignment {
  id           String           @id @default(uuid())
  chargeId     String
  studentId    String
  appliedMonth DateTime         @db.Date
  amount       Decimal          @db.Decimal(10, 2)
  reason       String?
  createdAt    DateTime         @default(now())
  createdById  String?          @db.Uuid
  deletedAt    DateTime?
  charge       ChargeDefinition @relation(fields: [chargeId], references: [id], onDelete: Cascade)
  student      Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([chargeId])
  @@index([studentId])
  @@index([appliedMonth])
}

model StudentFeeHistory {
  id                 String        @id @default(uuid())
  studentId          String
  feeStructureId     String?
  periodMonth        DateTime      @db.Date
  version            Int           @default(1)
  baseAmount         Decimal       @db.Decimal(12, 2)
  scholarshipAmount  Decimal       @default(0) @db.Decimal(12, 2)
  extraChargesAmount Decimal       @default(0) @db.Decimal(12, 2)
  finalPayable       Decimal       @db.Decimal(12, 2)
  breakdown          Json
  createdAt          DateTime      @default(now())
  createdById        String?       @db.Uuid
  feeStructure       FeeStructure? @relation(fields: [feeStructureId], references: [id])
  student            Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, periodMonth, version], name: "unique_student_month_fee_version")
  @@index([studentId])
  @@index([feeStructureId])
  @@index([periodMonth])
}

model AttendanceSession {
  id          String             @id @default(uuid())
  classId     String
  date        DateTime           @db.Date
  sessionType String             @default("daily")
  markedBy    String
  markedAt    DateTime           @default(now())
  isCompleted Boolean            @default(false)
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime?
  records     AttendanceRecord[]
  class       Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  marker      User               @relation(fields: [markedBy], references: [id])

  @@unique([classId, date, sessionType])
  @@index([classId])
  @@index([date])
  @@index([markedBy])
}

model AttendanceRecord {
  id        String            @id @default(uuid())
  sessionId String
  studentId String
  status    AttendanceStatus
  markedAt  DateTime          @default(now())
  remarks   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime?
  session   AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student   Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([sessionId, studentId])
  @@index([sessionId])
  @@index([studentId])
  @@index([status])
}

model TeacherAttendanceSession {
  id          String                    @id @default(uuid())
  date        DateTime                  @db.Date
  sessionType String                    @default("daily")
  markedBy    String
  markedAt    DateTime                  @default(now())
  isCompleted Boolean                   @default(false)
  notes       String?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime?
  records     TeacherAttendanceRecord[]
  marker      User                      @relation("TeacherAttendanceMarkedBy", fields: [markedBy], references: [id])

  @@unique([date, sessionType])
  @@index([date])
  @@index([markedBy])
}

model TeacherAttendanceRecord {
  id        String                   @id @default(uuid())
  sessionId String
  teacherId String
  status    AttendanceStatus
  markedAt  DateTime                 @default(now())
  remarks   String?
  createdAt DateTime                 @default(now())
  updatedAt DateTime?
  session   TeacherAttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  teacher   Teacher                  @relation("TeacherAttendanceRecords", fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([sessionId, teacherId])
  @@index([sessionId])
  @@index([teacherId])
  @@index([status])
}

model StaffAttendanceSession {
  id          String                  @id @default(uuid())
  date        DateTime                @db.Date
  sessionType String                  @default("daily")
  markedBy    String
  markedAt    DateTime                @default(now())
  isCompleted Boolean                 @default(false)
  notes       String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime?
  records     StaffAttendanceRecord[]
  marker      User                    @relation("StaffAttendanceMarkedBy", fields: [markedBy], references: [id])

  @@unique([date, sessionType])
  @@index([date])
  @@index([markedBy])
}

model StaffAttendanceRecord {
  id        String                 @id @default(uuid())
  sessionId String
  staffId   String
  status    AttendanceStatus
  markedAt  DateTime               @default(now())
  remarks   String?
  createdAt DateTime               @default(now())
  updatedAt DateTime?
  session   StaffAttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  staff     Staff                  @relation("StaffAttendanceRecords", fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([sessionId, staffId])
  @@index([sessionId])
  @@index([staffId])
  @@index([status])
}

model WorkingDaysTracker {
  id                String   @id @default(uuid())
  month             Int
  year              Int
  totalDays         Int
  saturdays         Int
  holidays          Int
  events            Int
  exams             Int
  availableDays     Int
  emergencyClosures Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  @@unique([month, year])
  @@index([month])
  @@index([year])
}

model Complaint {
  id              String                 @id @default(uuid())
  title           String
  description     String
  type            ComplaintType
  priority        ComplaintPriority      @default(MEDIUM)
  status          ComplaintStatus        @default(OPEN)
  recipientType   ComplaintRecipientType
  recipientId     String?
  complainantId   String
  complainantType String
  assignedToId    String?
  assignedAt      DateTime?
  resolvedAt      DateTime?
  resolution      String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  createdById     String?
  updatedById     String?
  deletedById     String?
  assignedTo      User?                  @relation("ComplaintAssignedTo", fields: [assignedToId], references: [id])
  complainant     User                   @relation("ComplaintComplainant", fields: [complainantId], references: [id])
  createdBy       User?                  @relation("ComplaintCreator", fields: [createdById], references: [id])
  deletedBy       User?                  @relation("ComplaintDeleter", fields: [deletedById], references: [id])
  recipient       User?                  @relation("ComplaintRecipient", fields: [recipientId], references: [id])
  updatedBy       User?                  @relation("ComplaintUpdater", fields: [updatedById], references: [id])
  attachments     ComplaintAttachment[]
  auditLogs       ComplaintAuditLog[]
  responses       ComplaintResponse[]

  @@index([complainantId])
  @@index([recipientId])
  @@index([assignedToId])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([recipientType])
  @@index([createdAt])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model ComplaintResponse {
  id          String    @id @default(uuid())
  complaintId String
  responderId String
  content     String
  isInternal  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  responder   User      @relation(fields: [responderId], references: [id])

  @@index([complaintId])
  @@index([responderId])
  @@index([createdAt])
}

model ComplaintAttachment {
  id           String    @id @default(uuid())
  complaintId  String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  uploadedAt   DateTime  @default(now())
  complaint    Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  @@index([complaintId])
  @@index([mimeType])
}

model ComplaintAuditLog {
  id          String    @id @default(uuid())
  complaintId String
  action      String
  details     Json?
  performedBy String?
  performedAt DateTime  @default(now())
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  performer   User?     @relation(fields: [performedBy], references: [id])

  @@index([complaintId])
  @@index([action])
  @@index([performedBy])
  @@index([performedAt])
}

model LeaveType {
  id                   String                @id @default(uuid())
  name                 String                @unique
  description          String?
  maxDays              Int                   @default(1)
  isPaid               Boolean               @default(false)
  status               LeaveTypeStatus       @default(ACTIVE)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime?
  deletedAt            DateTime?
  createdById          String?
  updatedById          String?
  deletedById          String?
  createdBy            User?                 @relation("LeaveTypeCreator", fields: [createdById], references: [id])
  deletedBy            User?                 @relation("LeaveTypeDeleter", fields: [deletedById], references: [id])
  updatedBy            User?                 @relation("LeaveTypeUpdater", fields: [updatedById], references: [id])
  teacherLeaveRequests TeacherLeaveRequest[]
  teacherLeaveUsage    TeacherLeaveUsage[]

  @@index([name])
  @@index([status])
  @@index([isPaid])
  @@index([createdAt])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model LeaveRequest {
  id                     String                   @id @default(uuid())
  title                  String
  description            String?
  type                   LeaveRequestType
  status                 LeaveRequestStatus       @default(PENDING_PARENT_APPROVAL)
  startDate              DateTime
  endDate                DateTime
  days                   Int
  studentId              String
  parentId               String?
  teacherId              String?
  parentApprovedAt       DateTime?
  teacherApprovedAt      DateTime?
  parentRejectedAt       DateTime?
  teacherRejectedAt      DateTime?
  parentRejectionReason  String?
  teacherRejectionReason String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?
  deletedAt              DateTime?
  createdById            String?
  updatedById            String?
  deletedById            String?
  createdBy              User?                    @relation("LeaveRequestCreator", fields: [createdById], references: [id])
  deletedBy              User?                    @relation("LeaveRequestDeleter", fields: [deletedById], references: [id])
  parent                 Parent?                  @relation(fields: [parentId], references: [id])
  student                Student                  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher                Teacher?                 @relation(fields: [teacherId], references: [id])
  updatedBy              User?                    @relation("LeaveRequestUpdater", fields: [updatedById], references: [id])
  attachments            LeaveRequestAttachment[]
  auditLogs              LeaveRequestAuditLog[]

  @@index([studentId])
  @@index([parentId])
  @@index([teacherId])
  @@index([type])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model LeaveRequestAttachment {
  id             String       @id @default(uuid())
  leaveRequestId String
  filename       String
  originalName   String
  mimeType       String
  size           Int
  url            String
  uploadedAt     DateTime     @default(now())
  leaveRequest   LeaveRequest @relation(fields: [leaveRequestId], references: [id], onDelete: Cascade)

  @@index([leaveRequestId])
  @@index([mimeType])
  @@index([size])
}

model LeaveRequestAuditLog {
  id             String       @id @default(uuid())
  leaveRequestId String
  action         String
  details        Json?
  performedBy    String?
  performedAt    DateTime     @default(now())
  leaveRequest   LeaveRequest @relation(fields: [leaveRequestId], references: [id], onDelete: Cascade)
  performer      User?        @relation(fields: [performedBy], references: [id])

  @@index([leaveRequestId])
  @@index([action])
  @@index([performedBy])
  @@index([performedAt])
}

model TeacherLeaveRequest {
  id              String                          @id @default(uuid())
  title           String
  description     String?
  leaveTypeId     String
  status          TeacherLeaveRequestStatus       @default(PENDING_ADMINISTRATION)
  startDate       DateTime
  endDate         DateTime
  days            Int
  teacherId       String
  adminId         String?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime                        @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  createdById     String?
  updatedById     String?
  deletedById     String?
  admin           User?                           @relation("TeacherLeaveRequestAdmin", fields: [adminId], references: [id])
  createdBy       User?                           @relation("TeacherLeaveRequestCreator", fields: [createdById], references: [id])
  deletedBy       User?                           @relation("TeacherLeaveRequestDeleter", fields: [deletedById], references: [id])
  leaveType       LeaveType                       @relation(fields: [leaveTypeId], references: [id])
  teacher         Teacher                         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  updatedBy       User?                           @relation("TeacherLeaveRequestUpdater", fields: [updatedById], references: [id])
  attachments     TeacherLeaveRequestAttachment[]
  auditLogs       TeacherLeaveRequestAuditLog[]

  @@index([teacherId])
  @@index([leaveTypeId])
  @@index([adminId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model TeacherLeaveRequestAttachment {
  id                    String              @id @default(uuid())
  teacherLeaveRequestId String
  filename              String
  originalName          String
  mimeType              String
  size                  Int
  url                   String
  uploadedAt            DateTime            @default(now())
  teacherId             String
  teacher               Teacher             @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherLeaveRequest   TeacherLeaveRequest @relation(fields: [teacherLeaveRequestId], references: [id], onDelete: Cascade)

  @@index([teacherLeaveRequestId])
  @@index([teacherId])
  @@index([mimeType])
  @@index([size])
}

model TeacherLeaveRequestAuditLog {
  id                    String              @id @default(uuid())
  teacherLeaveRequestId String
  action                String
  details               Json?
  performedBy           String?
  performedAt           DateTime            @default(now())
  performer             User?               @relation(fields: [performedBy], references: [id])
  teacherLeaveRequest   TeacherLeaveRequest @relation(fields: [teacherLeaveRequestId], references: [id], onDelete: Cascade)

  @@index([teacherLeaveRequestId])
  @@index([action])
  @@index([performedBy])
  @@index([performedAt])
}

model TeacherLeaveUsage {
  id            String    @id @default(uuid())
  teacherId     String
  leaveTypeId   String
  totalDaysUsed Int       @default(0)
  lastUpdated   DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdById   String?
  updatedById   String?
  deletedById   String?
  createdBy     User?     @relation("TeacherLeaveUsageCreator", fields: [createdById], references: [id])
  deletedBy     User?     @relation("TeacherLeaveUsageDeleter", fields: [deletedById], references: [id])
  leaveType     LeaveType @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)
  teacher       Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  updatedBy     User?     @relation("TeacherLeaveUsageUpdater", fields: [updatedById], references: [id])

  @@unique([teacherId, leaveTypeId, deletedAt], name: "unique_teacher_leave_type_usage")
  @@index([teacherId])
  @@index([leaveTypeId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

enum IDCardTemplateType {
  STUDENT
  TEACHER
  STAFF
  STAFF_NO_LOGIN
}

enum TemplateOrientation {
  HORIZONTAL
  VERTICAL
}

enum TemplateStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TemplateFieldType {
  TEXT
  IMAGE
  QR_CODE
  BARCODE
  LOGO
  PHOTO
  DATE
  TIME
  SIGNATURE
}

enum TextAlignment {
  LEFT
  CENTER
  RIGHT
  JUSTIFY
}

enum NoticePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NoticeRecipientType {
  ALL
  STUDENT
  PARENT
  TEACHER
  STAFF
  CLASS
}

enum NoticeCategory {
  GENERAL
  ACADEMIC
  EXAMINATION
  FEE
  EVENT
  HOLIDAY
  MEETING
  ANNOUNCEMENT
  URGENT
  OTHER
}

enum NoticeStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  EXPIRED
}

enum FeeItemFrequency {
  MONTHLY
  TERM
  ANNUAL
  ONE_TIME
}

enum FeeStructureStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum ScholarshipType {
  MERIT
  NEED_BASED
  SPORTS
  OTHER
}

enum ValueType {
  PERCENTAGE
  FIXED
}

enum ChargeType {
  FINE
  EQUIPMENT
  TRANSPORT
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum ComplaintType {
  ACADEMIC
  BEHAVIORAL
  FACILITY
  SAFETY
  BULLYING
  DISCIPLINARY
  FINANCIAL
  ADMINISTRATIVE
  OTHER
}

enum ComplaintStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
}

enum ComplaintPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ComplaintRecipientType {
  CLASS_TEACHER
  ADMINISTRATION
  PARENT
}

enum LeaveRequestStatus {
  PENDING_PARENT_APPROVAL
  PENDING_TEACHER_APPROVAL
  APPROVED
  REJECTED
  CANCELLED
}

enum LeaveRequestType {
  SICK
  PERSONAL
  VACATION
  EMERGENCY
  MEDICAL
  FAMILY
}

enum LeaveTypeStatus {
  ACTIVE
  INACTIVE
}

enum TeacherLeaveRequestStatus {
  PENDING_ADMINISTRATION
  APPROVED
  REJECTED
  CANCELLED
}

enum ExamResultStatus {
  DRAFT
  SUBMITTED
  PUBLISHED
  LOCKED
}
