/**
 * =============================================================================
 * Base DTOs
 * =============================================================================
 * Common base interfaces and types used across all DTOs.
 * These provide consistent structure for all data transfer objects.
 * =============================================================================
 */

import { z } from "zod";

/**
 * Base fields present in all entities
 */
export interface BaseEntity {
  /** Unique identifier (UUID) */
  id: string;

  /** Creation timestamp */
  created_at: Date;

  /** Last update timestamp */
  updated_at: Date;

  /** Soft delete timestamp (null if not deleted) */
  deleted_at: Date | null;
}

/**
 * Base fields for creating new entities (without system-generated fields)
 */
export interface BaseCreateDto {
  // No id, timestamps, or audit fields - these are generated by the system
}

/**
 * Base fields for updating entities
 */
export interface BaseUpdateDto {
  /** Optional update timestamp (usually set by system) */
  updated_at?: Date;
}

/**
 * Zod schema for UUID validation
 */
export const UuidSchema = z.string().uuid("Invalid UUID format");

/**
 * Zod schema for date validation
 */
export const DateSchema = z.coerce.date();

/**
 * Zod schema for optional date validation
 */
export const OptionalDateSchema = z.coerce.date().optional().nullable();

/**
 * Base Zod schema for entities
 */
export const BaseEntitySchema = z.object({
  id: UuidSchema,
  created_at: DateSchema,
  updated_at: DateSchema,
  deleted_at: OptionalDateSchema,
});

/**
 * Utility type to make all properties optional (for partial updates)
 */
export type PartialDto<T> = {
  [P in keyof T]?: T[P];
};

/**
 * Utility type to omit base entity fields from DTOs
 */
export type OmitBaseFields<T> = Omit<T, keyof BaseEntity>;

/**
 * Utility type for create DTOs (omits system-generated fields)
 */
export type CreateDto<T> = OmitBaseFields<T>;

/**
 * Utility type for update DTOs (partial + omits system-generated fields except updated_at)
 */
export type UpdateDto<T> = PartialDto<OmitBaseFields<T>> & {
  updated_at?: Date;
};

/**
 * Common validation schemas
 */
export const CommonValidation = {
  /** Email validation */
  email: z.string().email("Invalid email format").toLowerCase(),

  /** Phone validation (international format) */
  phone: z.string().regex(/^\+?[1-9]\d{1,14}$/, "Invalid phone number format"),

  /** Password validation */
  password: z
    .string()
    .min(8, "Password must be at least 8 characters")
    .regex(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,
      "Password must contain at least one lowercase letter, one uppercase letter, and one number",
    ),

  /** Name validation */
  name: z
    .string()
    .min(1, "Name is required")
    .max(100, "Name must be less than 100 characters")
    .regex(
      /^[a-zA-Z\s\-'\.]+$/,
      "Name can only contain letters, spaces, hyphens, apostrophes, and periods",
    ),

  /** Text content validation */
  text: z.string().min(1, "Text content is required"),

  /** Optional text validation */
  optionalText: z.string().optional().nullable(),

  /** URL validation */
  url: z.string().url("Invalid URL format"),

  /** Positive number validation */
  positiveNumber: z.number().positive("Must be a positive number"),

  /** Non-negative number validation */
  nonNegativeNumber: z.number().min(0, "Must be zero or positive"),
} as const;

/**
 * Common field length constraints
 */
export const FieldLengths = {
  SHORT_TEXT: 255,
  MEDIUM_TEXT: 1000,
  LONG_TEXT: 5000,
  DESCRIPTION: 2000,
  TITLE: 200,
  NAME: 100,
  EMAIL: 320, // RFC 5321 limit
  PHONE: 20,
} as const;
